// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/live_darshan/interface.go

// Package mock_live_darshan is a generated GoMock package.
package mock_live_darshan

import (
	id "ac9/glad/pkg/id"
	entity "ac9/glad/services/ldsd/entity"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWriter) Create(arg0 *entity.LiveDarshan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWriterMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWriter)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockWriter) Delete(ldID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ldID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWriterMockRecorder) Delete(ldID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWriter)(nil).Delete), ldID)
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockReader) Get(ldID int64) (*entity.LiveDarshan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ldID)
	ret0, _ := ret[0].(*entity.LiveDarshan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockReaderMockRecorder) Get(ldID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockReader)(nil).Get), ldID)
}

// GetCount mocks base method.
func (m *MockReader) GetCount(tenantID id.ID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockReaderMockRecorder) GetCount(tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockReader)(nil).GetCount), tenantID)
}

// List mocks base method.
func (m *MockReader) List(tenantID id.ID, page, limit int) ([]*entity.LiveDarshan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tenantID, page, limit)
	ret0, _ := ret[0].([]*entity.LiveDarshan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockReaderMockRecorder) List(tenantID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockReader)(nil).List), tenantID, page, limit)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 *entity.LiveDarshan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ldID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ldID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ldID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ldID)
}

// Get mocks base method.
func (m *MockRepository) Get(ldID int64) (*entity.LiveDarshan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ldID)
	ret0, _ := ret[0].(*entity.LiveDarshan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ldID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ldID)
}

// GetCount mocks base method.
func (m *MockRepository) GetCount(tenantID id.ID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", tenantID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockRepositoryMockRecorder) GetCount(tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockRepository)(nil).GetCount), tenantID)
}

// List mocks base method.
func (m *MockRepository) List(tenantID id.ID, page, limit int) ([]*entity.LiveDarshan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tenantID, page, limit)
	ret0, _ := ret[0].([]*entity.LiveDarshan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(tenantID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), tenantID, page, limit)
}

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateLiveDarshan mocks base method.
func (m *MockUsecase) CreateLiveDarshan(ldID int64, tenantID id.ID, date string, startTime time.Time, meetingURL, createdBy string) (*entity.LiveDarshan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLiveDarshan", ldID, tenantID, date, startTime, meetingURL, createdBy)
	ret0, _ := ret[0].(*entity.LiveDarshan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLiveDarshan indicates an expected call of CreateLiveDarshan.
func (mr *MockUsecaseMockRecorder) CreateLiveDarshan(ldID, tenantID, date, startTime, meetingURL, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLiveDarshan", reflect.TypeOf((*MockUsecase)(nil).CreateLiveDarshan), ldID, tenantID, date, startTime, meetingURL, createdBy)
}

// DeleteLiveDarshan mocks base method.
func (m *MockUsecase) DeleteLiveDarshan(ldID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLiveDarshan", ldID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLiveDarshan indicates an expected call of DeleteLiveDarshan.
func (mr *MockUsecaseMockRecorder) DeleteLiveDarshan(ldID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLiveDarshan", reflect.TypeOf((*MockUsecase)(nil).DeleteLiveDarshan), ldID)
}

// GetCount mocks base method.
func (m *MockUsecase) GetCount(tenantID id.ID) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", tenantID)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCount indicates an expected call of GetCount.
func (mr *MockUsecaseMockRecorder) GetCount(tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockUsecase)(nil).GetCount), tenantID)
}

// GetLiveDarshan mocks base method.
func (m *MockUsecase) GetLiveDarshan(ldID int64) (*entity.LiveDarshan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiveDarshan", ldID)
	ret0, _ := ret[0].(*entity.LiveDarshan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveDarshan indicates an expected call of GetLiveDarshan.
func (mr *MockUsecaseMockRecorder) GetLiveDarshan(ldID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveDarshan", reflect.TypeOf((*MockUsecase)(nil).GetLiveDarshan), ldID)
}

// ListLiveDarshan mocks base method.
func (m *MockUsecase) ListLiveDarshan(tenantID id.ID, page, limit int) ([]*entity.LiveDarshan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLiveDarshan", tenantID, page, limit)
	ret0, _ := ret[0].([]*entity.LiveDarshan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLiveDarshan indicates an expected call of ListLiveDarshan.
func (mr *MockUsecaseMockRecorder) ListLiveDarshan(tenantID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLiveDarshan", reflect.TypeOf((*MockUsecase)(nil).ListLiveDarshan), tenantID, page, limit)
}
