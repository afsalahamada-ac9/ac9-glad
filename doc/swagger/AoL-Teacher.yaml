openapi: 3.0.0
info:
  title: AoL Teacher Interface
  description: |-
    AoL Teacher API specification.

  contact:
    email: sudhagar@abovecloud9.ai
  version: 0.0.7
externalDocs:
  description: Find out more about AboveCloud9.AI
  url: https://abovecloud9.ai
servers:
  - url: https://dev.api.ac9ai.com/v1   # development
  - url: https://api.ac9ai.com/v1       # production
tags:
  - name: account
    description: Operations about accounts
  - name: center
    description: Operations about centers
  - name: course
    description: Operations about courses
  - name: glad
    description: GLAD platform level operations such as configuration
  - name: live-darshan
    description: Operations about live darshan
  - name: media
    description: Operations about media
  - name: participants
    description: Operations about participants
  - name: product
    description: Operations about products
  - name: user
    description: Operations about users

paths:
  /accounts:
    get:
      tags:
        - account
      summary: Finds user account using search string
      description: Retrives user accounts that match the given search string. This should be paginated.
      operationId: searchAccounts
      parameters:
        - name: q
          in: query
          description: Account names that need to be considered for filter
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: Account type
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number (for pagination)
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items in the response
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

  /centers:
    get:
      tags:
        - center
      summary: Finds centers
      description: Returns all the centers. We may need to optimize by returning the centers that match the search string
      operationId: findCenters
      parameters:
        - name: q
          in: query
          description: Search string
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number (for pagination)
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items in the response
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Center'
        '404':
          description: Center not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

  # Note: This API is unauthenticated
  /glad/config:
    get:
      tags:
        - glad
      summary: Retrieves GLAD configuration
      description: Returns the GLAD configuration 
      operationId: getGLADConfig
      parameters:
        - name: v   # Note: version ignored in v1
          in: query
          description: Current config version at the client
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GLADConfig'

  /courses:
    put:
      tags:
        - course
      summary: Updates an existing course
      description: Update an existing course by course id
      operationId: updateCourse
      requestBody:
        description: Update an existent course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []
    post:
      tags:
        - course
      summary: Adds a new course
      description: Add a new course
      operationId: addCourse
      requestBody:
        description: Create a new course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseResponse'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []
  /courses/me:
    get:
      tags:
        - course
      summary: Finds courses for the logged in user
      description: Returns courses associated with the logged in user
      operationId: findMyCourses
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []
  /courses/{courseID}:
    get:
      tags:
        - course
      summary: Finds course by ID
      description: Returns a single course
      operationId: getCourseById
      parameters:
        - name: courseID
          in: path
          description: ID of course to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []
    delete:
      tags:
        - course
      summary: Deletes a course
      description: delete a course
      operationId: deleteCourse
      parameters:
        - name: courseID
          in: path
          description: Course id to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid Course id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

  /live-darshan/token:
    get:
      summary: Get live-darshan token
      description: Retrieve token for live darshan
      responses:
        '200':
          description: Metadata successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/LiveDarshanToken'
        '400':
          description: Bad request. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []
  /live-darshan:
    get:
      summary: Get live-darshan details
      description: Retrieve live darshan details
      responses:
        '200':
          description: Live Darshan details successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LiveDarshan'
        '400':
          description: Bad request. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

  /media/metadata/{type}:
    get:
      summary: Get metadata
      description: Retrieve metadata for quotes, images, or both if no type is specified.
      parameters:
        - name: type
          in: path
          required: true
          description: The type of media to fetch metadata for (e.g., "quote" or "image"). If not specified, returns metadata for both.
          schema:
            type: string
            enum:
              - quote
              - image
      responses:
        '200':
          description: Metadata successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  quote:
                    type: object
                    properties:
                      metadata:
                        $ref: '#/components/schemas/MediaMetadata'
                  image:
                    type: object
                    properties:
                      metadata:
                        $ref: '#/components/schemas/MediaMetadata'
        '400':
          description: Bad request. 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

  /participants/{courseID}:
    get:
      tags:
        - participants
      summary: Finds participants by course ID
      description: Returns a list of participants
      operationId: getParticipantsByCourseID
      parameters:
        - name: courseID
          in: path
          description: ID of course to fetch participants
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Participant(s) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

  /products:
    get:
      tags:
        - product
      summary: List all products
      description: Returns a list of all available products
      operationId: listProducts
      parameters:
        - name: q
          in: query
          description: Search string
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number (for pagination)
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items in the response
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []
    
  /products/{id}:
    get:
      tags:
        - product
      summary: Get product by ID
      description: Returns a single product by its ID
      operationId: getProductByID
      parameters:
        - name: id
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

  /users/info:
    post:
      tags:
        - user
      summary: Posts user information to GLAD
      description: ''
      operationId: storeUserInfo
      requestBody:
        description: User information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
        '500':
          description: Server error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

components:
  schemas:
    DateArray:
      type: array
      items:
        type: string
        # Only date in YYYY-MM-DD format
        format: date
    DateTimeArray:
      type: array
      items:
        type: string
        # Full date-time in ISO 8601 format, YYYY-MM-DDTHH:MM:SSZ
        format: date-time
    DateTime:
      type: object
      properties:
        date:
          type: string
          format: date
        startTime:
          type: string
          format: time
        endTime:
          type: string
          format: time
    # TODO: Timezone values will likely change
    Timezone:
      type: string
      description: Supported timezones
      example: EST
      enum:
        - EST
        - CST
        - MST
        - PST

    CourseTeacher:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10000000
        is_primary:
          type: boolean

    CourseRequest:
      type: object
      properties:
        name:
          type: string
        organizer:
          type: array
          items:
            type: integer
            format: int64
            example: 10000000
        contact:
          type: array
          items:
            type: integer
            format: int64
            example: 10000000
        teacher:
          type: array
          items:
            $ref: '#/components/schemas/CourseTeacher'
        notes:
          type: string
          description: Course notes
        status:
          type: string
          description: Course status
          example: open
          enum:
            - open
            - expense-submitted
            - expense-declined
            - closed
            - active
            - declined
            - submitted
            - canceled
            - inactive
        maxAttendees:
          type: integer
          format: int32
          example: 10
        date:
          type: array
          items:
            $ref: '#/components/schemas/DateTime'
        timezone:
          $ref: '#/components/schemas/Timezone'
        address:
          $ref: '#/components/schemas/Address'
        centerID:
          type: integer
          format: int64
          example: 10000000
        productID:
          type: integer
          format: int64
          example: 20000000
        mode:
          type: string
          description: Course delivery mode
          example: in-person
          enum:
            - in-person
            - online
        notify:
          type: array
          items:
            type: integer
            format: int64
            example: 10000000

    CourseResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10000000
        shortURL:
          type: string
        dateID:
          type: array
          items:
            type: integer
            format: int64
            example: 10000000

    Course:
      # Combines the CourseRequest and CourseResponse
      allOf:
        - $ref: "#/components/schemas/CourseRequest"
        - $ref: "#/components/schemas/CourseResponse"
        - type: object
          properties:
            # Cannot be more than maxAttendees
            numAttendees:
              type: integer
              format: int32
              example: 10
            attendees:
              type: array
              items:
                type: integer
                format: int64
                example: 10000000

    Center:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 20000000
        # Note: Should avoid using this in the future. DEPRECATED
        extName:
          type: string
          example: 'L-000001'
        name:
          type: string
          example: 'Happiness Center'
        address:
          $ref: '#/components/schemas/Address'

    GLADConfig:
      type: object
      properties:
        # Note: timestamp could be used. Version information to be stored at the client and sent in the
        # config request to retrieve the changes from the backend.
        version:  # unused and not sent in v1. Client can set it to 0 if not received.
          type: integer
          format: int64
          example: 1
        timezone:
          type: array
          items:
            $ref: '#/components/schemas/Timezone'
        auth:
            $ref: '#/components/schemas/GLADConfigAuth'

    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
        country:
          type: string
          example: USA

    GLADConfigAuth:
      type: object
      properties:
        clientID:
          type: string
          example: abcd567efghijkl
        domain:
          type: string
          example: http://auth.ac9ai.com
        region:
          type: string
          example: us-east-2
        userPoolID:
          type: string
          example: JMzj123s
        url:
          type: string

    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 30000000
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '123-456-7890'
        type:
          type: string
          description: User Type
          example: teacher
          enum:
            - assistant-teacher
            - member
            - organizer
            - student
            - teacher
            - user

    UserInfo:
      type: object
      properties:
        pushToken:
          type: string
        appVersion:
          type: string
          example: 2024.12.1  # Note: Format to be finalized
        deviceInfo:     # For analytics
          type: object
        platformInfo:   # For analytics
          type: object

    UserInfoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10000000
        firstName:
          type: string
          example: theUser
        lastName:
          type: string
          example: AI

    # HTTP status code indicates whether the request is a success or failure
    # In case of failre, error object will contain the details. In case of success
    # schema defined in the spec above will be returned.
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
            message:
              type: string
            details:
              type: string
            traceID:
              type: string

    BaseProduct:
      type: object
      required:
        - name
        - title
        - ctype
      properties:
        title:
          type: string
          example: "Art of Living Course Part 1 - In person"
        ctype:
          type: string
          example: "C-12345"
        durationDays:
          type: number
          format: int
          example: 3
        visibility:
          type: string
          nullable: true
          enum: [Public, Unlisted]
          example: "Public"
        maxAttendees:
          type: number
          format: int
          example: 100
        format:
          type: string
          enum: [In Person, Online, Destination Retreats]
          example: "In Person"
        isAutoApprove:
          type: boolean

    Product:
      # Combines the BaseProduct and the inline model
      allOf:
        - $ref: "#/components/schemas/BaseProduct"
        - type: object
          properties:
            id:
              type: integer
              format: int64
              example: 10000000

    Participant:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 30000000
        # Note: This could be different from the email on the account
        email:
          type: integer
          format: int64
          example: 10000000
        account:
          $ref: '#/components/schemas/Account'

    LiveDarshanToken:
      type: object
      properties:
        zoom:
          type: object
          properties:
            signature:
              type: string
              description: Zoom meeting SDK JWT

    LiveDarshan:
      type: object
      properties:
        zoom:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 10000000
            date:
              type: string
              format: date
            startTime:
              type: string
              format: time
            meetingID:
              type: string
              description: Zoom meeting identifier
            password:
              type: string
              description: Zoom meeting password
            meetingURL:
              type: string
              description: Zoom meeting url

    MediaMetadata:
      type: object
      properties:
        version:
          type: string
          description: Version of the metadata
        lastUpdated:
          type: string
          format: date-time
          description: Last updated timestamp
        total:
          type: integer
          description: Total number of items (quotes or images) in the system
        url:
          type: string
          description: URL to fetch actual content or detailed metadata

  securitySchemes:
    bearer:
      type: apiKey
      name: Bearer
      in: header