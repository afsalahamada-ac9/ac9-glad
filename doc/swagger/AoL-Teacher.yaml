openapi: 3.0.0
info:
  title: AoL Teacher Interface
  description: |-
    AoL Teacher API specification.

  contact:
    email: sudhagar@abovecloud9.ai
  version: 0.0.4
externalDocs:
  description: Find out more about AboveCloud9.AI
  url: https://abovecloud9.ai
servers:
  - url: https://api.abovecloud9.ai/api/v1 # placeholder
tags:
  - name: account
    description: Operations about accounts
  - name: config
    description: System configuration such as timezones supported, etc
  - name: center
    description: Operations about centers
  - name: course
    description: Operations about courses
  - name: product
    description: Operations about products
  - name: user
    description: Operations about users, login, logout

paths:
  /courses:
    put:
      tags:
        - course
      summary: Updates an existing course
      description: Update an existing course by course id
      operationId: updateCourse
      requestBody:
        description: Update an existent course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []
    post:
      tags:
        - course
      summary: Adds a new course
      description: Add a new course
      operationId: addCourse
      requestBody:
        description: Create a new course
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []
  /courses/findByUser:
    get:
      tags:
        - course
      summary: Finds courses by user identifier
      description: Returns courses associated with given user IDs
      operationId: findCoursesByUser
      parameters:
        - name: userID
          in: query
          description: Comma-separated list of user IDs
          required: true
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /courses/{courseId}:
    get:
      tags:
        - course
      summary: Finds course by ID
      description: Returns a single course
      operationId: getCourseById
      parameters:
        - name: courseId
          in: path
          description: ID of course to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []
    delete:
      tags:
        - course
      summary: Deletes a course
      description: delete a course
      operationId: deleteCourse
      parameters:
        - name: courseId
          in: path
          description: Course id to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid Course id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

  /centers:
    get:
      tags:
        - center
      summary: Finds centers
      description: Returns all the centers. We may need to optimize by returning the centers that match the search string
      operationId: findCenters
      parameters:
        - name: q
          in: query
          description: Search string
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number (for pagination)
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items in the response
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Center'
        '404':
          description: Center not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /config:
    get:
      tags:
        - config
      summary: Retrieves configuration
      description: Returns the configuration 
      operationId: getConfig
      parameters:
        - name: v
          in: query
          description: Current config version at the client # timestamp could be used
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Config'

  /accounts:
    get:
      tags:
        - account
      summary: Finds user account using search string
      description: Retrives user accounts that match the given search string. This should be paginated.
      operationId: searchAccounts
      parameters:
        - name: q
          in: query
          description: Account names that need to be considered for filter
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: Account type
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number (for pagination)
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items in the response
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

  /users/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login typically email identifier
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /users/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products:
    get:
      tags:
        - product
      summary: List all products
      description: Returns a list of all available products
      operationId: listProducts
      parameters:
        - name: q
          in: query
          description: Search string
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number (for pagination)
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items in the response
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []
    
    post:
      tags:
        - product
      summary: Create a new product
      description: Add a new product to the system
      operationId: createProduct
      requestBody:
        description: Product object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BaseProduct'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

  /products/{id}:
    get:
      tags:
        - product
      summary: Get product by ID
      description: Returns a single product by its ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearer: []

components:
  schemas:
    DateArray:
      type: array
      items:
        type: string
        format: date          # Only date in YYYY-MM-DD format
    DateTimeArray:
      type: array
      items:
        type: string
        format: date-time     # Full date-time in ISO 8601 format, YYYY-MM-DDTHH:MM:SSZ
    DateTime:
      type: object
      properties:
        date:
          type: string
          format: date
        startTime:
          type: string
          format: time
        endTime:
          type: string
          format: time
    Timezone:
      type: string
      description: Supported timezones
      example: EST
      enum:
        - EST
        - CST
        - MST
        - PST
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10000000
        name:
          type: string
        organizer:
          type: array
          items:
            type: integer
            format: int64
            example: 10000000
        contact:
          type: array
          items:
            type: integer
            format: int64
            example: 10000000
        teacher:
          type: array
          items:
            type: integer
            format: int64
            example: 10000000
        notes:
          type: string
          description: Course notes
        status:
          type: string
          description: Course status
          example: open
          enum:
            - open
            - expense-submitted
            - expense-declined
            - closed
            - active
            - declined
            - submitted
            - canceled
            - inactive
        maxAttendees:
          type: integer
          format: int32
          example: 10
        dates:
          type: array
          items:
            $ref: '#/components/schemas/DateTime'
        timezone:
          $ref: '#/components/schemas/Timezone'
        address:
          $ref: '#/components/schemas/Address'
        centerId:
          type: integer
          format: int64
          example: 10000000
        productId:
          type: integer
          format: int64
          example: 20000000
        mode:
          type: string
          description: Course delivery mode
          example: in-person
          enum:
            - in-person
            - online
        notify:
          type: array
          items:
            type: integer
            format: int64
            example: 10000000
        numAttendees: # Cannot be more than maxAttendees
          type: integer
          format: int32
          example: 10
        attendees:
          type: array
          items:
            type: integer
            format: int64
            example: 10000000
        autoApprove:
          type: boolean
    Center:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 20000000
        # Note: Should avoid using this in the future. DEPRECATED
        extName:
          type: string
          example: 'L-000001'
        name:
          type: string
          example: 'Happiness Center'
        address:
          $ref: '#/components/schemas/Address'
        # Note: Cross checking whether this is required for v1.
        # status:
        #   type: string
        #   description: Center Status
        #   example: active
        #   enum:
        #     - active
        #     - inactive
        # Note: Do not see an usecase for v1
        # type:
        #   type: string
        #   description: Center Type
        #   example: ashram
        #   enum:
        #     - ashram
        #     - temple-of-knowledge
    Config:
      type: object
      properties:
        version: # timestamp could be used. Version information to be stored at the client and sent in the config request to retrieve the changes from the backend.
          type: integer
          format: int64
          example: 1
        timezones:
          type: array
          items:
            $ref: '#/components/schemas/Timezone'
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/Endpoints'
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
        country:
          type: string
          example: USA
    Endpoints:
      type: object
      properties:
        type:
          type: string
          enum:
            - auth
            - media-images
            - media-videos
            - analytics
            - logging
        url:
          type: string
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 30000000
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '********'
        type:
          type: string
          description: User Type
          example: teacher
          enum:
            - assistant-teacher
            - member
            - organizer
            - student
            - teacher
            - user
    User:
      type: object
      properties:
        accountId:
          type: integer
          format: int64
          example: 10000000
        username:
          type: string
          example: theUser

    # HTTP status code indicates whether the request is a success or failure
    # In case of failre, error object will contain the details. In case of success
    # schema defined in the spec above will be returned.
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
            message:
              type: string
            details:
              type: string
            traceId:
              type: string
    BaseProduct:
      type: object
      required:
        - name
        - title
        - ctype
        - baseProductId
      properties:
        # Just title is enough. This is an internal field. Commented until integration testing.
        # extName:
        #   type: string
        #   example: "Art of Living Course - Part 1"
        title:
          type: string
          example: "Art of Living Course Part 1 - In person"
        ctype:
          type: string
          example: "C-12345"
        # Note: This is not required. Commented until integration testing.
        # baseProductExtId:
        #   type: string
        #   example: "54321"
        durationDays:
          type: number
          format: int
          example: 3
        visibility:
          type: string
          nullable: true
          enum: [Public, Unlisted, null]
          example: "Public"
        maxAttendees:
          type: number
          format: int
          example: 100
        format:
          type: string
          enum: [In Person, Online, Destination Retreats]
          example: "In Person"
    Product:
      allOf: # Combines the BaseProduct and the inline model
        - $ref: "#/components/schemas/BaseProduct"
        - type: object
          required:
            - rootCause
          properties:
            id:
              type: integer
              format: int64
              example: 10000000

  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    bearer:
      type: apiKey
      name: Bearer
      in: header
    sample_auth_unused:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://abovecloud9.ai/oauth/authorize
          scopes:
            write:courses: modify courses
            read:courses: read courses