// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/course/interface.go

// Package mock_course is a generated GoMock package.
package mock_course

import (
	reflect "reflect"
	entity "sudhagar/glad/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockCourseReader is a mock of CourseReader interface.
type MockCourseReader struct {
	ctrl     *gomock.Controller
	recorder *MockCourseReaderMockRecorder
}

// MockCourseReaderMockRecorder is the mock recorder for MockCourseReader.
type MockCourseReaderMockRecorder struct {
	mock *MockCourseReader
}

// NewMockCourseReader creates a new mock instance.
func NewMockCourseReader(ctrl *gomock.Controller) *MockCourseReader {
	mock := &MockCourseReader{ctrl: ctrl}
	mock.recorder = &MockCourseReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseReader) EXPECT() *MockCourseReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCourseReader) Get(id entity.ID) (*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCourseReaderMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCourseReader)(nil).Get), id)
}

// GetCount mocks base method.
func (m *MockCourseReader) GetCount(id entity.ID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockCourseReaderMockRecorder) GetCount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCourseReader)(nil).GetCount), id)
}

// List mocks base method.
func (m *MockCourseReader) List(tenantID entity.ID, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tenantID, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCourseReaderMockRecorder) List(tenantID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCourseReader)(nil).List), tenantID, page, limit)
}

// Search mocks base method.
func (m *MockCourseReader) Search(tenantID entity.ID, query string, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", tenantID, query, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockCourseReaderMockRecorder) Search(tenantID, query, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCourseReader)(nil).Search), tenantID, query, page, limit)
}

// MockCourseWriter is a mock of CourseWriter interface.
type MockCourseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCourseWriterMockRecorder
}

// MockCourseWriterMockRecorder is the mock recorder for MockCourseWriter.
type MockCourseWriterMockRecorder struct {
	mock *MockCourseWriter
}

// NewMockCourseWriter creates a new mock instance.
func NewMockCourseWriter(ctrl *gomock.Controller) *MockCourseWriter {
	mock := &MockCourseWriter{ctrl: ctrl}
	mock.recorder = &MockCourseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseWriter) EXPECT() *MockCourseWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCourseWriter) Create(e *entity.Course) (entity.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(entity.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCourseWriterMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseWriter)(nil).Create), e)
}

// CreateCourseContact mocks base method.
func (m *MockCourseWriter) CreateCourseContact(arg0 entity.ID, arg1 []*entity.CourseContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourseContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCourseContact indicates an expected call of CreateCourseContact.
func (mr *MockCourseWriterMockRecorder) CreateCourseContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourseContact", reflect.TypeOf((*MockCourseWriter)(nil).CreateCourseContact), arg0, arg1)
}

// CreateCourseNotify mocks base method.
func (m *MockCourseWriter) CreateCourseNotify(arg0 entity.ID, arg1 []*entity.CourseNotify) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourseNotify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCourseNotify indicates an expected call of CreateCourseNotify.
func (mr *MockCourseWriterMockRecorder) CreateCourseNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourseNotify", reflect.TypeOf((*MockCourseWriter)(nil).CreateCourseNotify), arg0, arg1)
}

// CreateCourseOrganizer mocks base method.
func (m *MockCourseWriter) CreateCourseOrganizer(arg0 entity.ID, arg1 []*entity.CourseOrganizer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourseOrganizer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCourseOrganizer indicates an expected call of CreateCourseOrganizer.
func (mr *MockCourseWriterMockRecorder) CreateCourseOrganizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourseOrganizer", reflect.TypeOf((*MockCourseWriter)(nil).CreateCourseOrganizer), arg0, arg1)
}

// CreateCourseTeacher mocks base method.
func (m *MockCourseWriter) CreateCourseTeacher(arg0 entity.ID, arg1 []*entity.CourseTeacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourseTeacher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCourseTeacher indicates an expected call of CreateCourseTeacher.
func (mr *MockCourseWriterMockRecorder) CreateCourseTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourseTeacher", reflect.TypeOf((*MockCourseWriter)(nil).CreateCourseTeacher), arg0, arg1)
}

// Delete mocks base method.
func (m *MockCourseWriter) Delete(id entity.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCourseWriterMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCourseWriter)(nil).Delete), id)
}

// Update mocks base method.
func (m *MockCourseWriter) Update(e *entity.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCourseWriterMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCourseWriter)(nil).Update), e)
}

// MockCourseRepository is a mock of CourseRepository interface.
type MockCourseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCourseRepositoryMockRecorder
}

// MockCourseRepositoryMockRecorder is the mock recorder for MockCourseRepository.
type MockCourseRepositoryMockRecorder struct {
	mock *MockCourseRepository
}

// NewMockCourseRepository creates a new mock instance.
func NewMockCourseRepository(ctrl *gomock.Controller) *MockCourseRepository {
	mock := &MockCourseRepository{ctrl: ctrl}
	mock.recorder = &MockCourseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseRepository) EXPECT() *MockCourseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCourseRepository) Create(e *entity.Course) (entity.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(entity.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCourseRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseRepository)(nil).Create), e)
}

// CreateCourseContact mocks base method.
func (m *MockCourseRepository) CreateCourseContact(arg0 entity.ID, arg1 []*entity.CourseContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourseContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCourseContact indicates an expected call of CreateCourseContact.
func (mr *MockCourseRepositoryMockRecorder) CreateCourseContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourseContact", reflect.TypeOf((*MockCourseRepository)(nil).CreateCourseContact), arg0, arg1)
}

// CreateCourseNotify mocks base method.
func (m *MockCourseRepository) CreateCourseNotify(arg0 entity.ID, arg1 []*entity.CourseNotify) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourseNotify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCourseNotify indicates an expected call of CreateCourseNotify.
func (mr *MockCourseRepositoryMockRecorder) CreateCourseNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourseNotify", reflect.TypeOf((*MockCourseRepository)(nil).CreateCourseNotify), arg0, arg1)
}

// CreateCourseOrganizer mocks base method.
func (m *MockCourseRepository) CreateCourseOrganizer(arg0 entity.ID, arg1 []*entity.CourseOrganizer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourseOrganizer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCourseOrganizer indicates an expected call of CreateCourseOrganizer.
func (mr *MockCourseRepositoryMockRecorder) CreateCourseOrganizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourseOrganizer", reflect.TypeOf((*MockCourseRepository)(nil).CreateCourseOrganizer), arg0, arg1)
}

// CreateCourseTeacher mocks base method.
func (m *MockCourseRepository) CreateCourseTeacher(arg0 entity.ID, arg1 []*entity.CourseTeacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourseTeacher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCourseTeacher indicates an expected call of CreateCourseTeacher.
func (mr *MockCourseRepositoryMockRecorder) CreateCourseTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourseTeacher", reflect.TypeOf((*MockCourseRepository)(nil).CreateCourseTeacher), arg0, arg1)
}

// Delete mocks base method.
func (m *MockCourseRepository) Delete(id entity.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCourseRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCourseRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockCourseRepository) Get(id entity.ID) (*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCourseRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCourseRepository)(nil).Get), id)
}

// GetCount mocks base method.
func (m *MockCourseRepository) GetCount(id entity.ID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockCourseRepositoryMockRecorder) GetCount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCourseRepository)(nil).GetCount), id)
}

// List mocks base method.
func (m *MockCourseRepository) List(tenantID entity.ID, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tenantID, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCourseRepositoryMockRecorder) List(tenantID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCourseRepository)(nil).List), tenantID, page, limit)
}

// Search mocks base method.
func (m *MockCourseRepository) Search(tenantID entity.ID, query string, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", tenantID, query, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockCourseRepositoryMockRecorder) Search(tenantID, query, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCourseRepository)(nil).Search), tenantID, query, page, limit)
}

// Update mocks base method.
func (m *MockCourseRepository) Update(e *entity.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCourseRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCourseRepository)(nil).Update), e)
}

// MockCourseTimingReader is a mock of CourseTimingReader interface.
type MockCourseTimingReader struct {
	ctrl     *gomock.Controller
	recorder *MockCourseTimingReaderMockRecorder
}

// MockCourseTimingReaderMockRecorder is the mock recorder for MockCourseTimingReader.
type MockCourseTimingReaderMockRecorder struct {
	mock *MockCourseTimingReader
}

// NewMockCourseTimingReader creates a new mock instance.
func NewMockCourseTimingReader(ctrl *gomock.Controller) *MockCourseTimingReader {
	mock := &MockCourseTimingReader{ctrl: ctrl}
	mock.recorder = &MockCourseTimingReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseTimingReader) EXPECT() *MockCourseTimingReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCourseTimingReader) Get(id entity.ID) (*entity.CourseTiming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.CourseTiming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCourseTimingReaderMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCourseTimingReader)(nil).Get), id)
}

// GetByCourse mocks base method.
func (m *MockCourseTimingReader) GetByCourse(courseID entity.ID) ([]*entity.CourseTiming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCourse", courseID)
	ret0, _ := ret[0].([]*entity.CourseTiming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCourse indicates an expected call of GetByCourse.
func (mr *MockCourseTimingReaderMockRecorder) GetByCourse(courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCourse", reflect.TypeOf((*MockCourseTimingReader)(nil).GetByCourse), courseID)
}

// GetCount mocks base method.
func (m *MockCourseTimingReader) GetCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockCourseTimingReaderMockRecorder) GetCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCourseTimingReader)(nil).GetCount))
}

// MockCourseTimingWriter is a mock of CourseTimingWriter interface.
type MockCourseTimingWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCourseTimingWriterMockRecorder
}

// MockCourseTimingWriterMockRecorder is the mock recorder for MockCourseTimingWriter.
type MockCourseTimingWriterMockRecorder struct {
	mock *MockCourseTimingWriter
}

// NewMockCourseTimingWriter creates a new mock instance.
func NewMockCourseTimingWriter(ctrl *gomock.Controller) *MockCourseTimingWriter {
	mock := &MockCourseTimingWriter{ctrl: ctrl}
	mock.recorder = &MockCourseTimingWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseTimingWriter) EXPECT() *MockCourseTimingWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCourseTimingWriter) Create(e *entity.CourseTiming) (entity.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(entity.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCourseTimingWriterMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseTimingWriter)(nil).Create), e)
}

// Delete mocks base method.
func (m *MockCourseTimingWriter) Delete(id entity.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCourseTimingWriterMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCourseTimingWriter)(nil).Delete), id)
}

// Update mocks base method.
func (m *MockCourseTimingWriter) Update(e *entity.CourseTiming) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCourseTimingWriterMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCourseTimingWriter)(nil).Update), e)
}

// MockCourseTimingRepository is a mock of CourseTimingRepository interface.
type MockCourseTimingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCourseTimingRepositoryMockRecorder
}

// MockCourseTimingRepositoryMockRecorder is the mock recorder for MockCourseTimingRepository.
type MockCourseTimingRepositoryMockRecorder struct {
	mock *MockCourseTimingRepository
}

// NewMockCourseTimingRepository creates a new mock instance.
func NewMockCourseTimingRepository(ctrl *gomock.Controller) *MockCourseTimingRepository {
	mock := &MockCourseTimingRepository{ctrl: ctrl}
	mock.recorder = &MockCourseTimingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseTimingRepository) EXPECT() *MockCourseTimingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCourseTimingRepository) Create(e *entity.CourseTiming) (entity.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(entity.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCourseTimingRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseTimingRepository)(nil).Create), e)
}

// Delete mocks base method.
func (m *MockCourseTimingRepository) Delete(id entity.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCourseTimingRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCourseTimingRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockCourseTimingRepository) Get(id entity.ID) (*entity.CourseTiming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.CourseTiming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCourseTimingRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCourseTimingRepository)(nil).Get), id)
}

// GetByCourse mocks base method.
func (m *MockCourseTimingRepository) GetByCourse(courseID entity.ID) ([]*entity.CourseTiming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCourse", courseID)
	ret0, _ := ret[0].([]*entity.CourseTiming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCourse indicates an expected call of GetByCourse.
func (mr *MockCourseTimingRepositoryMockRecorder) GetByCourse(courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCourse", reflect.TypeOf((*MockCourseTimingRepository)(nil).GetByCourse), courseID)
}

// GetCount mocks base method.
func (m *MockCourseTimingRepository) GetCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockCourseTimingRepositoryMockRecorder) GetCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCourseTimingRepository)(nil).GetCount))
}

// Update mocks base method.
func (m *MockCourseTimingRepository) Update(e *entity.CourseTiming) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCourseTimingRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCourseTimingRepository)(nil).Update), e)
}

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateCourse mocks base method.
func (m *MockUseCase) CreateCourse(course entity.Course, cos []*entity.CourseOrganizer, cts []*entity.CourseTeacher, ccs []*entity.CourseContact, cns []*entity.CourseNotify, courseTimings []*entity.CourseTiming) (entity.ID, []entity.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", course, cos, cts, ccs, cns, courseTimings)
	ret0, _ := ret[0].(entity.ID)
	ret1, _ := ret[1].([]entity.ID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockUseCaseMockRecorder) CreateCourse(course, cos, cts, ccs, cns, courseTimings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockUseCase)(nil).CreateCourse), course, cos, cts, ccs, cns, courseTimings)
}

// DeleteCourse mocks base method.
func (m *MockUseCase) DeleteCourse(id entity.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourse", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourse indicates an expected call of DeleteCourse.
func (mr *MockUseCaseMockRecorder) DeleteCourse(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourse", reflect.TypeOf((*MockUseCase)(nil).DeleteCourse), id)
}

// GetCount mocks base method.
func (m *MockUseCase) GetCount(id entity.ID) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", id)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCount indicates an expected call of GetCount.
func (mr *MockUseCaseMockRecorder) GetCount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockUseCase)(nil).GetCount), id)
}

// GetCourse mocks base method.
func (m *MockUseCase) GetCourse(id entity.ID) (*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourse", id)
	ret0, _ := ret[0].(*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourse indicates an expected call of GetCourse.
func (mr *MockUseCaseMockRecorder) GetCourse(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourse", reflect.TypeOf((*MockUseCase)(nil).GetCourse), id)
}

// ListCourses mocks base method.
func (m *MockUseCase) ListCourses(tenantID entity.ID, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCourses", tenantID, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCourses indicates an expected call of ListCourses.
func (mr *MockUseCaseMockRecorder) ListCourses(tenantID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCourses", reflect.TypeOf((*MockUseCase)(nil).ListCourses), tenantID, page, limit)
}

// SearchCourses mocks base method.
func (m *MockUseCase) SearchCourses(tenantID entity.ID, query string, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCourses", tenantID, query, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCourses indicates an expected call of SearchCourses.
func (mr *MockUseCaseMockRecorder) SearchCourses(tenantID, query, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCourses", reflect.TypeOf((*MockUseCase)(nil).SearchCourses), tenantID, query, page, limit)
}

// UpdateCourse mocks base method.
func (m *MockUseCase) UpdateCourse(e *entity.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourse", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockUseCaseMockRecorder) UpdateCourse(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockUseCase)(nil).UpdateCourse), e)
}
