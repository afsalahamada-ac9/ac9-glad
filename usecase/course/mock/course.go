// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/course/interface.go

// Package mock_course is a generated GoMock package.
package mock_course

import (
	entity "ac9/glad/entity"
	id "ac9/glad/pkg/id"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCourseReader is a mock of CourseReader interface.
type MockCourseReader struct {
	ctrl     *gomock.Controller
	recorder *MockCourseReaderMockRecorder
}

// MockCourseReaderMockRecorder is the mock recorder for MockCourseReader.
type MockCourseReaderMockRecorder struct {
	mock *MockCourseReader
}

// NewMockCourseReader creates a new mock instance.
func NewMockCourseReader(ctrl *gomock.Controller) *MockCourseReader {
	mock := &MockCourseReader{ctrl: ctrl}
	mock.recorder = &MockCourseReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseReader) EXPECT() *MockCourseReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCourseReader) Get(id id.ID) (*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCourseReaderMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCourseReader)(nil).Get), id)
}

// GetByAccount mocks base method.
func (m *MockCourseReader) GetByAccount(tenantID, accountID id.ID, page, limit int) (int, []*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccount", tenantID, accountID, page, limit)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*entity.Course)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByAccount indicates an expected call of GetByAccount.
func (mr *MockCourseReaderMockRecorder) GetByAccount(tenantID, accountID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccount", reflect.TypeOf((*MockCourseReader)(nil).GetByAccount), tenantID, accountID, page, limit)
}

// GetCount mocks base method.
func (m *MockCourseReader) GetCount(id id.ID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockCourseReaderMockRecorder) GetCount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCourseReader)(nil).GetCount), id)
}

// List mocks base method.
func (m *MockCourseReader) List(tenantID id.ID, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tenantID, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCourseReaderMockRecorder) List(tenantID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCourseReader)(nil).List), tenantID, page, limit)
}

// Search mocks base method.
func (m *MockCourseReader) Search(tenantID id.ID, query string, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", tenantID, query, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockCourseReaderMockRecorder) Search(tenantID, query, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCourseReader)(nil).Search), tenantID, query, page, limit)
}

// MockCourseWriter is a mock of CourseWriter interface.
type MockCourseWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCourseWriterMockRecorder
}

// MockCourseWriterMockRecorder is the mock recorder for MockCourseWriter.
type MockCourseWriterMockRecorder struct {
	mock *MockCourseWriter
}

// NewMockCourseWriter creates a new mock instance.
func NewMockCourseWriter(ctrl *gomock.Controller) *MockCourseWriter {
	mock := &MockCourseWriter{ctrl: ctrl}
	mock.recorder = &MockCourseWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseWriter) EXPECT() *MockCourseWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCourseWriter) Create(e *entity.Course) (id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(id.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCourseWriterMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseWriter)(nil).Create), e)
}

// Delete mocks base method.
func (m *MockCourseWriter) Delete(id id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCourseWriterMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCourseWriter)(nil).Delete), id)
}

// Update mocks base method.
func (m *MockCourseWriter) Update(e *entity.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCourseWriterMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCourseWriter)(nil).Update), e)
}

// Upsert mocks base method.
func (m *MockCourseWriter) Upsert(course *entity.Course) (id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", course)
	ret0, _ := ret[0].(id.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockCourseWriterMockRecorder) Upsert(course interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockCourseWriter)(nil).Upsert), course)
}

// MockCourseOrganizerWriter is a mock of CourseOrganizerWriter interface.
type MockCourseOrganizerWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCourseOrganizerWriterMockRecorder
}

// MockCourseOrganizerWriterMockRecorder is the mock recorder for MockCourseOrganizerWriter.
type MockCourseOrganizerWriterMockRecorder struct {
	mock *MockCourseOrganizerWriter
}

// NewMockCourseOrganizerWriter creates a new mock instance.
func NewMockCourseOrganizerWriter(ctrl *gomock.Controller) *MockCourseOrganizerWriter {
	mock := &MockCourseOrganizerWriter{ctrl: ctrl}
	mock.recorder = &MockCourseOrganizerWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseOrganizerWriter) EXPECT() *MockCourseOrganizerWriterMockRecorder {
	return m.recorder
}

// DeleteCourseOrganizer mocks base method.
func (m *MockCourseOrganizerWriter) DeleteCourseOrganizer(arg0 id.ID, arg1 []*entity.CourseOrganizer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseOrganizer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseOrganizer indicates an expected call of DeleteCourseOrganizer.
func (mr *MockCourseOrganizerWriterMockRecorder) DeleteCourseOrganizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseOrganizer", reflect.TypeOf((*MockCourseOrganizerWriter)(nil).DeleteCourseOrganizer), arg0, arg1)
}

// DeleteCourseOrganizerByCourse mocks base method.
func (m *MockCourseOrganizerWriter) DeleteCourseOrganizerByCourse(arg0 id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseOrganizerByCourse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseOrganizerByCourse indicates an expected call of DeleteCourseOrganizerByCourse.
func (mr *MockCourseOrganizerWriterMockRecorder) DeleteCourseOrganizerByCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseOrganizerByCourse", reflect.TypeOf((*MockCourseOrganizerWriter)(nil).DeleteCourseOrganizerByCourse), arg0)
}

// InsertCourseOrganizer mocks base method.
func (m *MockCourseOrganizerWriter) InsertCourseOrganizer(arg0 id.ID, arg1 []*entity.CourseOrganizer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCourseOrganizer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCourseOrganizer indicates an expected call of InsertCourseOrganizer.
func (mr *MockCourseOrganizerWriterMockRecorder) InsertCourseOrganizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCourseOrganizer", reflect.TypeOf((*MockCourseOrganizerWriter)(nil).InsertCourseOrganizer), arg0, arg1)
}

// UpdateCourseOrganizer mocks base method.
func (m *MockCourseOrganizerWriter) UpdateCourseOrganizer(arg0 id.ID, arg1 []*entity.CourseOrganizer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseOrganizer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourseOrganizer indicates an expected call of UpdateCourseOrganizer.
func (mr *MockCourseOrganizerWriterMockRecorder) UpdateCourseOrganizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseOrganizer", reflect.TypeOf((*MockCourseOrganizerWriter)(nil).UpdateCourseOrganizer), arg0, arg1)
}

// MockCourseOrganizerReader is a mock of CourseOrganizerReader interface.
type MockCourseOrganizerReader struct {
	ctrl     *gomock.Controller
	recorder *MockCourseOrganizerReaderMockRecorder
}

// MockCourseOrganizerReaderMockRecorder is the mock recorder for MockCourseOrganizerReader.
type MockCourseOrganizerReaderMockRecorder struct {
	mock *MockCourseOrganizerReader
}

// NewMockCourseOrganizerReader creates a new mock instance.
func NewMockCourseOrganizerReader(ctrl *gomock.Controller) *MockCourseOrganizerReader {
	mock := &MockCourseOrganizerReader{ctrl: ctrl}
	mock.recorder = &MockCourseOrganizerReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseOrganizerReader) EXPECT() *MockCourseOrganizerReaderMockRecorder {
	return m.recorder
}

// GetCourseOrganizer mocks base method.
func (m *MockCourseOrganizerReader) GetCourseOrganizer(arg0 id.ID) ([]*entity.CourseOrganizer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseOrganizer", arg0)
	ret0, _ := ret[0].([]*entity.CourseOrganizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseOrganizer indicates an expected call of GetCourseOrganizer.
func (mr *MockCourseOrganizerReaderMockRecorder) GetCourseOrganizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseOrganizer", reflect.TypeOf((*MockCourseOrganizerReader)(nil).GetCourseOrganizer), arg0)
}

// MultiGetCourseOrganizer mocks base method.
func (m *MockCourseOrganizerReader) MultiGetCourseOrganizer(arg0 []id.ID) ([][]*entity.CourseOrganizer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetCourseOrganizer", arg0)
	ret0, _ := ret[0].([][]*entity.CourseOrganizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetCourseOrganizer indicates an expected call of MultiGetCourseOrganizer.
func (mr *MockCourseOrganizerReaderMockRecorder) MultiGetCourseOrganizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetCourseOrganizer", reflect.TypeOf((*MockCourseOrganizerReader)(nil).MultiGetCourseOrganizer), arg0)
}

// MockCourseTeacherWriter is a mock of CourseTeacherWriter interface.
type MockCourseTeacherWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCourseTeacherWriterMockRecorder
}

// MockCourseTeacherWriterMockRecorder is the mock recorder for MockCourseTeacherWriter.
type MockCourseTeacherWriterMockRecorder struct {
	mock *MockCourseTeacherWriter
}

// NewMockCourseTeacherWriter creates a new mock instance.
func NewMockCourseTeacherWriter(ctrl *gomock.Controller) *MockCourseTeacherWriter {
	mock := &MockCourseTeacherWriter{ctrl: ctrl}
	mock.recorder = &MockCourseTeacherWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseTeacherWriter) EXPECT() *MockCourseTeacherWriterMockRecorder {
	return m.recorder
}

// DeleteCourseTeacher mocks base method.
func (m *MockCourseTeacherWriter) DeleteCourseTeacher(arg0 id.ID, arg1 []*entity.CourseTeacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseTeacher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseTeacher indicates an expected call of DeleteCourseTeacher.
func (mr *MockCourseTeacherWriterMockRecorder) DeleteCourseTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseTeacher", reflect.TypeOf((*MockCourseTeacherWriter)(nil).DeleteCourseTeacher), arg0, arg1)
}

// DeleteCourseTeacherByCourse mocks base method.
func (m *MockCourseTeacherWriter) DeleteCourseTeacherByCourse(arg0 id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseTeacherByCourse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseTeacherByCourse indicates an expected call of DeleteCourseTeacherByCourse.
func (mr *MockCourseTeacherWriterMockRecorder) DeleteCourseTeacherByCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseTeacherByCourse", reflect.TypeOf((*MockCourseTeacherWriter)(nil).DeleteCourseTeacherByCourse), arg0)
}

// InsertCourseTeacher mocks base method.
func (m *MockCourseTeacherWriter) InsertCourseTeacher(arg0 id.ID, arg1 []*entity.CourseTeacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCourseTeacher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCourseTeacher indicates an expected call of InsertCourseTeacher.
func (mr *MockCourseTeacherWriterMockRecorder) InsertCourseTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCourseTeacher", reflect.TypeOf((*MockCourseTeacherWriter)(nil).InsertCourseTeacher), arg0, arg1)
}

// UpdateCourseTeacher mocks base method.
func (m *MockCourseTeacherWriter) UpdateCourseTeacher(arg0 id.ID, arg1 []*entity.CourseTeacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseTeacher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourseTeacher indicates an expected call of UpdateCourseTeacher.
func (mr *MockCourseTeacherWriterMockRecorder) UpdateCourseTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseTeacher", reflect.TypeOf((*MockCourseTeacherWriter)(nil).UpdateCourseTeacher), arg0, arg1)
}

// MockCourseTeacherReader is a mock of CourseTeacherReader interface.
type MockCourseTeacherReader struct {
	ctrl     *gomock.Controller
	recorder *MockCourseTeacherReaderMockRecorder
}

// MockCourseTeacherReaderMockRecorder is the mock recorder for MockCourseTeacherReader.
type MockCourseTeacherReaderMockRecorder struct {
	mock *MockCourseTeacherReader
}

// NewMockCourseTeacherReader creates a new mock instance.
func NewMockCourseTeacherReader(ctrl *gomock.Controller) *MockCourseTeacherReader {
	mock := &MockCourseTeacherReader{ctrl: ctrl}
	mock.recorder = &MockCourseTeacherReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseTeacherReader) EXPECT() *MockCourseTeacherReaderMockRecorder {
	return m.recorder
}

// GetCourseTeacher mocks base method.
func (m *MockCourseTeacherReader) GetCourseTeacher(arg0 id.ID) ([]*entity.CourseTeacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseTeacher", arg0)
	ret0, _ := ret[0].([]*entity.CourseTeacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseTeacher indicates an expected call of GetCourseTeacher.
func (mr *MockCourseTeacherReaderMockRecorder) GetCourseTeacher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseTeacher", reflect.TypeOf((*MockCourseTeacherReader)(nil).GetCourseTeacher), arg0)
}

// MultiGetCourseTeacher mocks base method.
func (m *MockCourseTeacherReader) MultiGetCourseTeacher(arg0 []id.ID) ([][]*entity.CourseTeacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetCourseTeacher", arg0)
	ret0, _ := ret[0].([][]*entity.CourseTeacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetCourseTeacher indicates an expected call of MultiGetCourseTeacher.
func (mr *MockCourseTeacherReaderMockRecorder) MultiGetCourseTeacher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetCourseTeacher", reflect.TypeOf((*MockCourseTeacherReader)(nil).MultiGetCourseTeacher), arg0)
}

// MockCourseContactWriter is a mock of CourseContactWriter interface.
type MockCourseContactWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCourseContactWriterMockRecorder
}

// MockCourseContactWriterMockRecorder is the mock recorder for MockCourseContactWriter.
type MockCourseContactWriterMockRecorder struct {
	mock *MockCourseContactWriter
}

// NewMockCourseContactWriter creates a new mock instance.
func NewMockCourseContactWriter(ctrl *gomock.Controller) *MockCourseContactWriter {
	mock := &MockCourseContactWriter{ctrl: ctrl}
	mock.recorder = &MockCourseContactWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseContactWriter) EXPECT() *MockCourseContactWriterMockRecorder {
	return m.recorder
}

// DeleteCourseContact mocks base method.
func (m *MockCourseContactWriter) DeleteCourseContact(arg0 id.ID, arg1 []*entity.CourseContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseContact indicates an expected call of DeleteCourseContact.
func (mr *MockCourseContactWriterMockRecorder) DeleteCourseContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseContact", reflect.TypeOf((*MockCourseContactWriter)(nil).DeleteCourseContact), arg0, arg1)
}

// DeleteCourseContactByCourse mocks base method.
func (m *MockCourseContactWriter) DeleteCourseContactByCourse(arg0 id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseContactByCourse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseContactByCourse indicates an expected call of DeleteCourseContactByCourse.
func (mr *MockCourseContactWriterMockRecorder) DeleteCourseContactByCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseContactByCourse", reflect.TypeOf((*MockCourseContactWriter)(nil).DeleteCourseContactByCourse), arg0)
}

// InsertCourseContact mocks base method.
func (m *MockCourseContactWriter) InsertCourseContact(arg0 id.ID, arg1 []*entity.CourseContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCourseContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCourseContact indicates an expected call of InsertCourseContact.
func (mr *MockCourseContactWriterMockRecorder) InsertCourseContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCourseContact", reflect.TypeOf((*MockCourseContactWriter)(nil).InsertCourseContact), arg0, arg1)
}

// UpdateCourseContact mocks base method.
func (m *MockCourseContactWriter) UpdateCourseContact(arg0 id.ID, arg1 []*entity.CourseContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourseContact indicates an expected call of UpdateCourseContact.
func (mr *MockCourseContactWriterMockRecorder) UpdateCourseContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseContact", reflect.TypeOf((*MockCourseContactWriter)(nil).UpdateCourseContact), arg0, arg1)
}

// MockCourseContactReader is a mock of CourseContactReader interface.
type MockCourseContactReader struct {
	ctrl     *gomock.Controller
	recorder *MockCourseContactReaderMockRecorder
}

// MockCourseContactReaderMockRecorder is the mock recorder for MockCourseContactReader.
type MockCourseContactReaderMockRecorder struct {
	mock *MockCourseContactReader
}

// NewMockCourseContactReader creates a new mock instance.
func NewMockCourseContactReader(ctrl *gomock.Controller) *MockCourseContactReader {
	mock := &MockCourseContactReader{ctrl: ctrl}
	mock.recorder = &MockCourseContactReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseContactReader) EXPECT() *MockCourseContactReaderMockRecorder {
	return m.recorder
}

// GetCourseContact mocks base method.
func (m *MockCourseContactReader) GetCourseContact(arg0 id.ID) ([]*entity.CourseContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseContact", arg0)
	ret0, _ := ret[0].([]*entity.CourseContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseContact indicates an expected call of GetCourseContact.
func (mr *MockCourseContactReaderMockRecorder) GetCourseContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseContact", reflect.TypeOf((*MockCourseContactReader)(nil).GetCourseContact), arg0)
}

// MultiGetCourseContact mocks base method.
func (m *MockCourseContactReader) MultiGetCourseContact(arg0 []id.ID) ([][]*entity.CourseContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetCourseContact", arg0)
	ret0, _ := ret[0].([][]*entity.CourseContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetCourseContact indicates an expected call of MultiGetCourseContact.
func (mr *MockCourseContactReaderMockRecorder) MultiGetCourseContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetCourseContact", reflect.TypeOf((*MockCourseContactReader)(nil).MultiGetCourseContact), arg0)
}

// MockCourseNotifyWriter is a mock of CourseNotifyWriter interface.
type MockCourseNotifyWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCourseNotifyWriterMockRecorder
}

// MockCourseNotifyWriterMockRecorder is the mock recorder for MockCourseNotifyWriter.
type MockCourseNotifyWriterMockRecorder struct {
	mock *MockCourseNotifyWriter
}

// NewMockCourseNotifyWriter creates a new mock instance.
func NewMockCourseNotifyWriter(ctrl *gomock.Controller) *MockCourseNotifyWriter {
	mock := &MockCourseNotifyWriter{ctrl: ctrl}
	mock.recorder = &MockCourseNotifyWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseNotifyWriter) EXPECT() *MockCourseNotifyWriterMockRecorder {
	return m.recorder
}

// DeleteCourseNotify mocks base method.
func (m *MockCourseNotifyWriter) DeleteCourseNotify(arg0 id.ID, arg1 []*entity.CourseNotify) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseNotify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseNotify indicates an expected call of DeleteCourseNotify.
func (mr *MockCourseNotifyWriterMockRecorder) DeleteCourseNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseNotify", reflect.TypeOf((*MockCourseNotifyWriter)(nil).DeleteCourseNotify), arg0, arg1)
}

// DeleteCourseNotifyByCourse mocks base method.
func (m *MockCourseNotifyWriter) DeleteCourseNotifyByCourse(arg0 id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseNotifyByCourse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseNotifyByCourse indicates an expected call of DeleteCourseNotifyByCourse.
func (mr *MockCourseNotifyWriterMockRecorder) DeleteCourseNotifyByCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseNotifyByCourse", reflect.TypeOf((*MockCourseNotifyWriter)(nil).DeleteCourseNotifyByCourse), arg0)
}

// InsertCourseNotify mocks base method.
func (m *MockCourseNotifyWriter) InsertCourseNotify(arg0 id.ID, arg1 []*entity.CourseNotify) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCourseNotify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCourseNotify indicates an expected call of InsertCourseNotify.
func (mr *MockCourseNotifyWriterMockRecorder) InsertCourseNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCourseNotify", reflect.TypeOf((*MockCourseNotifyWriter)(nil).InsertCourseNotify), arg0, arg1)
}

// UpdateCourseNotify mocks base method.
func (m *MockCourseNotifyWriter) UpdateCourseNotify(arg0 id.ID, arg1 []*entity.CourseNotify) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseNotify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourseNotify indicates an expected call of UpdateCourseNotify.
func (mr *MockCourseNotifyWriterMockRecorder) UpdateCourseNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseNotify", reflect.TypeOf((*MockCourseNotifyWriter)(nil).UpdateCourseNotify), arg0, arg1)
}

// MockCourseNotifyReader is a mock of CourseNotifyReader interface.
type MockCourseNotifyReader struct {
	ctrl     *gomock.Controller
	recorder *MockCourseNotifyReaderMockRecorder
}

// MockCourseNotifyReaderMockRecorder is the mock recorder for MockCourseNotifyReader.
type MockCourseNotifyReaderMockRecorder struct {
	mock *MockCourseNotifyReader
}

// NewMockCourseNotifyReader creates a new mock instance.
func NewMockCourseNotifyReader(ctrl *gomock.Controller) *MockCourseNotifyReader {
	mock := &MockCourseNotifyReader{ctrl: ctrl}
	mock.recorder = &MockCourseNotifyReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseNotifyReader) EXPECT() *MockCourseNotifyReaderMockRecorder {
	return m.recorder
}

// GetCourseNotify mocks base method.
func (m *MockCourseNotifyReader) GetCourseNotify(arg0 id.ID) ([]*entity.CourseNotify, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseNotify", arg0)
	ret0, _ := ret[0].([]*entity.CourseNotify)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseNotify indicates an expected call of GetCourseNotify.
func (mr *MockCourseNotifyReaderMockRecorder) GetCourseNotify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseNotify", reflect.TypeOf((*MockCourseNotifyReader)(nil).GetCourseNotify), arg0)
}

// MultiGetCourseNotify mocks base method.
func (m *MockCourseNotifyReader) MultiGetCourseNotify(arg0 []id.ID) ([][]*entity.CourseNotify, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetCourseNotify", arg0)
	ret0, _ := ret[0].([][]*entity.CourseNotify)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetCourseNotify indicates an expected call of MultiGetCourseNotify.
func (mr *MockCourseNotifyReaderMockRecorder) MultiGetCourseNotify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetCourseNotify", reflect.TypeOf((*MockCourseNotifyReader)(nil).MultiGetCourseNotify), arg0)
}

// MockCourseRepository is a mock of CourseRepository interface.
type MockCourseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCourseRepositoryMockRecorder
}

// MockCourseRepositoryMockRecorder is the mock recorder for MockCourseRepository.
type MockCourseRepositoryMockRecorder struct {
	mock *MockCourseRepository
}

// NewMockCourseRepository creates a new mock instance.
func NewMockCourseRepository(ctrl *gomock.Controller) *MockCourseRepository {
	mock := &MockCourseRepository{ctrl: ctrl}
	mock.recorder = &MockCourseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseRepository) EXPECT() *MockCourseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCourseRepository) Create(e *entity.Course) (id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(id.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCourseRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseRepository)(nil).Create), e)
}

// Delete mocks base method.
func (m *MockCourseRepository) Delete(id id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCourseRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCourseRepository)(nil).Delete), id)
}

// DeleteCourseContact mocks base method.
func (m *MockCourseRepository) DeleteCourseContact(arg0 id.ID, arg1 []*entity.CourseContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseContact indicates an expected call of DeleteCourseContact.
func (mr *MockCourseRepositoryMockRecorder) DeleteCourseContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseContact", reflect.TypeOf((*MockCourseRepository)(nil).DeleteCourseContact), arg0, arg1)
}

// DeleteCourseContactByCourse mocks base method.
func (m *MockCourseRepository) DeleteCourseContactByCourse(arg0 id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseContactByCourse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseContactByCourse indicates an expected call of DeleteCourseContactByCourse.
func (mr *MockCourseRepositoryMockRecorder) DeleteCourseContactByCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseContactByCourse", reflect.TypeOf((*MockCourseRepository)(nil).DeleteCourseContactByCourse), arg0)
}

// DeleteCourseNotify mocks base method.
func (m *MockCourseRepository) DeleteCourseNotify(arg0 id.ID, arg1 []*entity.CourseNotify) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseNotify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseNotify indicates an expected call of DeleteCourseNotify.
func (mr *MockCourseRepositoryMockRecorder) DeleteCourseNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseNotify", reflect.TypeOf((*MockCourseRepository)(nil).DeleteCourseNotify), arg0, arg1)
}

// DeleteCourseNotifyByCourse mocks base method.
func (m *MockCourseRepository) DeleteCourseNotifyByCourse(arg0 id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseNotifyByCourse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseNotifyByCourse indicates an expected call of DeleteCourseNotifyByCourse.
func (mr *MockCourseRepositoryMockRecorder) DeleteCourseNotifyByCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseNotifyByCourse", reflect.TypeOf((*MockCourseRepository)(nil).DeleteCourseNotifyByCourse), arg0)
}

// DeleteCourseOrganizer mocks base method.
func (m *MockCourseRepository) DeleteCourseOrganizer(arg0 id.ID, arg1 []*entity.CourseOrganizer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseOrganizer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseOrganizer indicates an expected call of DeleteCourseOrganizer.
func (mr *MockCourseRepositoryMockRecorder) DeleteCourseOrganizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseOrganizer", reflect.TypeOf((*MockCourseRepository)(nil).DeleteCourseOrganizer), arg0, arg1)
}

// DeleteCourseOrganizerByCourse mocks base method.
func (m *MockCourseRepository) DeleteCourseOrganizerByCourse(arg0 id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseOrganizerByCourse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseOrganizerByCourse indicates an expected call of DeleteCourseOrganizerByCourse.
func (mr *MockCourseRepositoryMockRecorder) DeleteCourseOrganizerByCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseOrganizerByCourse", reflect.TypeOf((*MockCourseRepository)(nil).DeleteCourseOrganizerByCourse), arg0)
}

// DeleteCourseTeacher mocks base method.
func (m *MockCourseRepository) DeleteCourseTeacher(arg0 id.ID, arg1 []*entity.CourseTeacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseTeacher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseTeacher indicates an expected call of DeleteCourseTeacher.
func (mr *MockCourseRepositoryMockRecorder) DeleteCourseTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseTeacher", reflect.TypeOf((*MockCourseRepository)(nil).DeleteCourseTeacher), arg0, arg1)
}

// DeleteCourseTeacherByCourse mocks base method.
func (m *MockCourseRepository) DeleteCourseTeacherByCourse(arg0 id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourseTeacherByCourse", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourseTeacherByCourse indicates an expected call of DeleteCourseTeacherByCourse.
func (mr *MockCourseRepositoryMockRecorder) DeleteCourseTeacherByCourse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourseTeacherByCourse", reflect.TypeOf((*MockCourseRepository)(nil).DeleteCourseTeacherByCourse), arg0)
}

// Get mocks base method.
func (m *MockCourseRepository) Get(id id.ID) (*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCourseRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCourseRepository)(nil).Get), id)
}

// GetByAccount mocks base method.
func (m *MockCourseRepository) GetByAccount(tenantID, accountID id.ID, page, limit int) (int, []*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccount", tenantID, accountID, page, limit)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*entity.Course)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByAccount indicates an expected call of GetByAccount.
func (mr *MockCourseRepositoryMockRecorder) GetByAccount(tenantID, accountID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccount", reflect.TypeOf((*MockCourseRepository)(nil).GetByAccount), tenantID, accountID, page, limit)
}

// GetCount mocks base method.
func (m *MockCourseRepository) GetCount(id id.ID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockCourseRepositoryMockRecorder) GetCount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCourseRepository)(nil).GetCount), id)
}

// GetCourseContact mocks base method.
func (m *MockCourseRepository) GetCourseContact(arg0 id.ID) ([]*entity.CourseContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseContact", arg0)
	ret0, _ := ret[0].([]*entity.CourseContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseContact indicates an expected call of GetCourseContact.
func (mr *MockCourseRepositoryMockRecorder) GetCourseContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseContact", reflect.TypeOf((*MockCourseRepository)(nil).GetCourseContact), arg0)
}

// GetCourseNotify mocks base method.
func (m *MockCourseRepository) GetCourseNotify(arg0 id.ID) ([]*entity.CourseNotify, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseNotify", arg0)
	ret0, _ := ret[0].([]*entity.CourseNotify)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseNotify indicates an expected call of GetCourseNotify.
func (mr *MockCourseRepositoryMockRecorder) GetCourseNotify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseNotify", reflect.TypeOf((*MockCourseRepository)(nil).GetCourseNotify), arg0)
}

// GetCourseOrganizer mocks base method.
func (m *MockCourseRepository) GetCourseOrganizer(arg0 id.ID) ([]*entity.CourseOrganizer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseOrganizer", arg0)
	ret0, _ := ret[0].([]*entity.CourseOrganizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseOrganizer indicates an expected call of GetCourseOrganizer.
func (mr *MockCourseRepositoryMockRecorder) GetCourseOrganizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseOrganizer", reflect.TypeOf((*MockCourseRepository)(nil).GetCourseOrganizer), arg0)
}

// GetCourseTeacher mocks base method.
func (m *MockCourseRepository) GetCourseTeacher(arg0 id.ID) ([]*entity.CourseTeacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseTeacher", arg0)
	ret0, _ := ret[0].([]*entity.CourseTeacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseTeacher indicates an expected call of GetCourseTeacher.
func (mr *MockCourseRepositoryMockRecorder) GetCourseTeacher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseTeacher", reflect.TypeOf((*MockCourseRepository)(nil).GetCourseTeacher), arg0)
}

// InsertCourseContact mocks base method.
func (m *MockCourseRepository) InsertCourseContact(arg0 id.ID, arg1 []*entity.CourseContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCourseContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCourseContact indicates an expected call of InsertCourseContact.
func (mr *MockCourseRepositoryMockRecorder) InsertCourseContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCourseContact", reflect.TypeOf((*MockCourseRepository)(nil).InsertCourseContact), arg0, arg1)
}

// InsertCourseNotify mocks base method.
func (m *MockCourseRepository) InsertCourseNotify(arg0 id.ID, arg1 []*entity.CourseNotify) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCourseNotify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCourseNotify indicates an expected call of InsertCourseNotify.
func (mr *MockCourseRepositoryMockRecorder) InsertCourseNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCourseNotify", reflect.TypeOf((*MockCourseRepository)(nil).InsertCourseNotify), arg0, arg1)
}

// InsertCourseOrganizer mocks base method.
func (m *MockCourseRepository) InsertCourseOrganizer(arg0 id.ID, arg1 []*entity.CourseOrganizer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCourseOrganizer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCourseOrganizer indicates an expected call of InsertCourseOrganizer.
func (mr *MockCourseRepositoryMockRecorder) InsertCourseOrganizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCourseOrganizer", reflect.TypeOf((*MockCourseRepository)(nil).InsertCourseOrganizer), arg0, arg1)
}

// InsertCourseTeacher mocks base method.
func (m *MockCourseRepository) InsertCourseTeacher(arg0 id.ID, arg1 []*entity.CourseTeacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCourseTeacher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCourseTeacher indicates an expected call of InsertCourseTeacher.
func (mr *MockCourseRepositoryMockRecorder) InsertCourseTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCourseTeacher", reflect.TypeOf((*MockCourseRepository)(nil).InsertCourseTeacher), arg0, arg1)
}

// List mocks base method.
func (m *MockCourseRepository) List(tenantID id.ID, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", tenantID, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCourseRepositoryMockRecorder) List(tenantID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCourseRepository)(nil).List), tenantID, page, limit)
}

// MultiGetCourseContact mocks base method.
func (m *MockCourseRepository) MultiGetCourseContact(arg0 []id.ID) ([][]*entity.CourseContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetCourseContact", arg0)
	ret0, _ := ret[0].([][]*entity.CourseContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetCourseContact indicates an expected call of MultiGetCourseContact.
func (mr *MockCourseRepositoryMockRecorder) MultiGetCourseContact(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetCourseContact", reflect.TypeOf((*MockCourseRepository)(nil).MultiGetCourseContact), arg0)
}

// MultiGetCourseNotify mocks base method.
func (m *MockCourseRepository) MultiGetCourseNotify(arg0 []id.ID) ([][]*entity.CourseNotify, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetCourseNotify", arg0)
	ret0, _ := ret[0].([][]*entity.CourseNotify)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetCourseNotify indicates an expected call of MultiGetCourseNotify.
func (mr *MockCourseRepositoryMockRecorder) MultiGetCourseNotify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetCourseNotify", reflect.TypeOf((*MockCourseRepository)(nil).MultiGetCourseNotify), arg0)
}

// MultiGetCourseOrganizer mocks base method.
func (m *MockCourseRepository) MultiGetCourseOrganizer(arg0 []id.ID) ([][]*entity.CourseOrganizer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetCourseOrganizer", arg0)
	ret0, _ := ret[0].([][]*entity.CourseOrganizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetCourseOrganizer indicates an expected call of MultiGetCourseOrganizer.
func (mr *MockCourseRepositoryMockRecorder) MultiGetCourseOrganizer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetCourseOrganizer", reflect.TypeOf((*MockCourseRepository)(nil).MultiGetCourseOrganizer), arg0)
}

// MultiGetCourseTeacher mocks base method.
func (m *MockCourseRepository) MultiGetCourseTeacher(arg0 []id.ID) ([][]*entity.CourseTeacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetCourseTeacher", arg0)
	ret0, _ := ret[0].([][]*entity.CourseTeacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetCourseTeacher indicates an expected call of MultiGetCourseTeacher.
func (mr *MockCourseRepositoryMockRecorder) MultiGetCourseTeacher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetCourseTeacher", reflect.TypeOf((*MockCourseRepository)(nil).MultiGetCourseTeacher), arg0)
}

// Search mocks base method.
func (m *MockCourseRepository) Search(tenantID id.ID, query string, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", tenantID, query, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockCourseRepositoryMockRecorder) Search(tenantID, query, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCourseRepository)(nil).Search), tenantID, query, page, limit)
}

// Update mocks base method.
func (m *MockCourseRepository) Update(e *entity.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCourseRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCourseRepository)(nil).Update), e)
}

// UpdateCourseContact mocks base method.
func (m *MockCourseRepository) UpdateCourseContact(arg0 id.ID, arg1 []*entity.CourseContact) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseContact", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourseContact indicates an expected call of UpdateCourseContact.
func (mr *MockCourseRepositoryMockRecorder) UpdateCourseContact(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseContact", reflect.TypeOf((*MockCourseRepository)(nil).UpdateCourseContact), arg0, arg1)
}

// UpdateCourseNotify mocks base method.
func (m *MockCourseRepository) UpdateCourseNotify(arg0 id.ID, arg1 []*entity.CourseNotify) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseNotify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourseNotify indicates an expected call of UpdateCourseNotify.
func (mr *MockCourseRepositoryMockRecorder) UpdateCourseNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseNotify", reflect.TypeOf((*MockCourseRepository)(nil).UpdateCourseNotify), arg0, arg1)
}

// UpdateCourseOrganizer mocks base method.
func (m *MockCourseRepository) UpdateCourseOrganizer(arg0 id.ID, arg1 []*entity.CourseOrganizer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseOrganizer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourseOrganizer indicates an expected call of UpdateCourseOrganizer.
func (mr *MockCourseRepositoryMockRecorder) UpdateCourseOrganizer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseOrganizer", reflect.TypeOf((*MockCourseRepository)(nil).UpdateCourseOrganizer), arg0, arg1)
}

// UpdateCourseTeacher mocks base method.
func (m *MockCourseRepository) UpdateCourseTeacher(arg0 id.ID, arg1 []*entity.CourseTeacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourseTeacher", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourseTeacher indicates an expected call of UpdateCourseTeacher.
func (mr *MockCourseRepositoryMockRecorder) UpdateCourseTeacher(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourseTeacher", reflect.TypeOf((*MockCourseRepository)(nil).UpdateCourseTeacher), arg0, arg1)
}

// Upsert mocks base method.
func (m *MockCourseRepository) Upsert(course *entity.Course) (id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", course)
	ret0, _ := ret[0].(id.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockCourseRepositoryMockRecorder) Upsert(course interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockCourseRepository)(nil).Upsert), course)
}

// MockCourseTimingReader is a mock of CourseTimingReader interface.
type MockCourseTimingReader struct {
	ctrl     *gomock.Controller
	recorder *MockCourseTimingReaderMockRecorder
}

// MockCourseTimingReaderMockRecorder is the mock recorder for MockCourseTimingReader.
type MockCourseTimingReaderMockRecorder struct {
	mock *MockCourseTimingReader
}

// NewMockCourseTimingReader creates a new mock instance.
func NewMockCourseTimingReader(ctrl *gomock.Controller) *MockCourseTimingReader {
	mock := &MockCourseTimingReader{ctrl: ctrl}
	mock.recorder = &MockCourseTimingReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseTimingReader) EXPECT() *MockCourseTimingReaderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCourseTimingReader) Get(id id.ID) (*entity.CourseTiming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.CourseTiming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCourseTimingReaderMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCourseTimingReader)(nil).Get), id)
}

// GetByCourse mocks base method.
func (m *MockCourseTimingReader) GetByCourse(courseID id.ID) ([]*entity.CourseTiming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCourse", courseID)
	ret0, _ := ret[0].([]*entity.CourseTiming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCourse indicates an expected call of GetByCourse.
func (mr *MockCourseTimingReaderMockRecorder) GetByCourse(courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCourse", reflect.TypeOf((*MockCourseTimingReader)(nil).GetByCourse), courseID)
}

// GetCount mocks base method.
func (m *MockCourseTimingReader) GetCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockCourseTimingReaderMockRecorder) GetCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCourseTimingReader)(nil).GetCount))
}

// MultiGetCourseTiming mocks base method.
func (m *MockCourseTimingReader) MultiGetCourseTiming(courseIDList []id.ID) ([][]*entity.CourseTiming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetCourseTiming", courseIDList)
	ret0, _ := ret[0].([][]*entity.CourseTiming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetCourseTiming indicates an expected call of MultiGetCourseTiming.
func (mr *MockCourseTimingReaderMockRecorder) MultiGetCourseTiming(courseIDList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetCourseTiming", reflect.TypeOf((*MockCourseTimingReader)(nil).MultiGetCourseTiming), courseIDList)
}

// MockCourseTimingWriter is a mock of CourseTimingWriter interface.
type MockCourseTimingWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCourseTimingWriterMockRecorder
}

// MockCourseTimingWriterMockRecorder is the mock recorder for MockCourseTimingWriter.
type MockCourseTimingWriterMockRecorder struct {
	mock *MockCourseTimingWriter
}

// NewMockCourseTimingWriter creates a new mock instance.
func NewMockCourseTimingWriter(ctrl *gomock.Controller) *MockCourseTimingWriter {
	mock := &MockCourseTimingWriter{ctrl: ctrl}
	mock.recorder = &MockCourseTimingWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseTimingWriter) EXPECT() *MockCourseTimingWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCourseTimingWriter) Create(e *entity.CourseTiming) (id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(id.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCourseTimingWriterMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseTimingWriter)(nil).Create), e)
}

// Delete mocks base method.
func (m *MockCourseTimingWriter) Delete(id id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCourseTimingWriterMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCourseTimingWriter)(nil).Delete), id)
}

// Update mocks base method.
func (m *MockCourseTimingWriter) Update(e *entity.CourseTiming) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCourseTimingWriterMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCourseTimingWriter)(nil).Update), e)
}

// MockCourseTimingRepository is a mock of CourseTimingRepository interface.
type MockCourseTimingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCourseTimingRepositoryMockRecorder
}

// MockCourseTimingRepositoryMockRecorder is the mock recorder for MockCourseTimingRepository.
type MockCourseTimingRepositoryMockRecorder struct {
	mock *MockCourseTimingRepository
}

// NewMockCourseTimingRepository creates a new mock instance.
func NewMockCourseTimingRepository(ctrl *gomock.Controller) *MockCourseTimingRepository {
	mock := &MockCourseTimingRepository{ctrl: ctrl}
	mock.recorder = &MockCourseTimingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseTimingRepository) EXPECT() *MockCourseTimingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCourseTimingRepository) Create(e *entity.CourseTiming) (id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(id.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCourseTimingRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseTimingRepository)(nil).Create), e)
}

// Delete mocks base method.
func (m *MockCourseTimingRepository) Delete(id id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCourseTimingRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCourseTimingRepository)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockCourseTimingRepository) Get(id id.ID) (*entity.CourseTiming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*entity.CourseTiming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCourseTimingRepositoryMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCourseTimingRepository)(nil).Get), id)
}

// GetByCourse mocks base method.
func (m *MockCourseTimingRepository) GetByCourse(courseID id.ID) ([]*entity.CourseTiming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCourse", courseID)
	ret0, _ := ret[0].([]*entity.CourseTiming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCourse indicates an expected call of GetByCourse.
func (mr *MockCourseTimingRepositoryMockRecorder) GetByCourse(courseID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCourse", reflect.TypeOf((*MockCourseTimingRepository)(nil).GetByCourse), courseID)
}

// GetCount mocks base method.
func (m *MockCourseTimingRepository) GetCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockCourseTimingRepositoryMockRecorder) GetCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockCourseTimingRepository)(nil).GetCount))
}

// MultiGetCourseTiming mocks base method.
func (m *MockCourseTimingRepository) MultiGetCourseTiming(courseIDList []id.ID) ([][]*entity.CourseTiming, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiGetCourseTiming", courseIDList)
	ret0, _ := ret[0].([][]*entity.CourseTiming)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiGetCourseTiming indicates an expected call of MultiGetCourseTiming.
func (mr *MockCourseTimingRepositoryMockRecorder) MultiGetCourseTiming(courseIDList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiGetCourseTiming", reflect.TypeOf((*MockCourseTimingRepository)(nil).MultiGetCourseTiming), courseIDList)
}

// Update mocks base method.
func (m *MockCourseTimingRepository) Update(e *entity.CourseTiming) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCourseTimingRepositoryMockRecorder) Update(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCourseTimingRepository)(nil).Update), e)
}

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CreateCourse mocks base method.
func (m *MockUseCase) CreateCourse(course entity.Course, cos []*entity.CourseOrganizer, cts []*entity.CourseTeacher, ccs []*entity.CourseContact, cns []*entity.CourseNotify, courseTimings []*entity.CourseTiming) (id.ID, []id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCourse", course, cos, cts, ccs, cns, courseTimings)
	ret0, _ := ret[0].(id.ID)
	ret1, _ := ret[1].([]id.ID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateCourse indicates an expected call of CreateCourse.
func (mr *MockUseCaseMockRecorder) CreateCourse(course, cos, cts, ccs, cns, courseTimings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCourse", reflect.TypeOf((*MockUseCase)(nil).CreateCourse), course, cos, cts, ccs, cns, courseTimings)
}

// DeleteCourse mocks base method.
func (m *MockUseCase) DeleteCourse(id id.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCourse", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCourse indicates an expected call of DeleteCourse.
func (mr *MockUseCaseMockRecorder) DeleteCourse(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCourse", reflect.TypeOf((*MockUseCase)(nil).DeleteCourse), id)
}

// GetCount mocks base method.
func (m *MockUseCase) GetCount(id id.ID) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount", id)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCount indicates an expected call of GetCount.
func (mr *MockUseCaseMockRecorder) GetCount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockUseCase)(nil).GetCount), id)
}

// GetCourse mocks base method.
func (m *MockUseCase) GetCourse(id id.ID) (*entity.CourseFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourse", id)
	ret0, _ := ret[0].(*entity.CourseFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourse indicates an expected call of GetCourse.
func (mr *MockUseCaseMockRecorder) GetCourse(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourse", reflect.TypeOf((*MockUseCase)(nil).GetCourse), id)
}

// GetCourseByAccount mocks base method.
func (m *MockUseCase) GetCourseByAccount(tenantID, accountID id.ID, page, limit int) (int, []*entity.CourseFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseByAccount", tenantID, accountID, page, limit)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]*entity.CourseFull)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCourseByAccount indicates an expected call of GetCourseByAccount.
func (mr *MockUseCaseMockRecorder) GetCourseByAccount(tenantID, accountID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseByAccount", reflect.TypeOf((*MockUseCase)(nil).GetCourseByAccount), tenantID, accountID, page, limit)
}

// ListCourses mocks base method.
func (m *MockUseCase) ListCourses(tenantID id.ID, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCourses", tenantID, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCourses indicates an expected call of ListCourses.
func (mr *MockUseCaseMockRecorder) ListCourses(tenantID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCourses", reflect.TypeOf((*MockUseCase)(nil).ListCourses), tenantID, page, limit)
}

// SearchCourses mocks base method.
func (m *MockUseCase) SearchCourses(tenantID id.ID, query string, page, limit int) ([]*entity.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCourses", tenantID, query, page, limit)
	ret0, _ := ret[0].([]*entity.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCourses indicates an expected call of SearchCourses.
func (mr *MockUseCaseMockRecorder) SearchCourses(tenantID, query, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCourses", reflect.TypeOf((*MockUseCase)(nil).SearchCourses), tenantID, query, page, limit)
}

// UpdateCourse mocks base method.
func (m *MockUseCase) UpdateCourse(course entity.Course, cos []*entity.CourseOrganizer, cts []*entity.CourseTeacher, ccs []*entity.CourseContact, cns []*entity.CourseNotify, courseTimings []*entity.CourseTiming) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCourse", course, cos, cts, ccs, cns, courseTimings)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCourse indicates an expected call of UpdateCourse.
func (mr *MockUseCaseMockRecorder) UpdateCourse(course, cos, cts, ccs, cns, courseTimings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCourse", reflect.TypeOf((*MockUseCase)(nil).UpdateCourse), course, cos, cts, ccs, cns, courseTimings)
}

// UpsertCourse mocks base method.
func (m *MockUseCase) UpsertCourse(course *entity.Course) (id.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCourse", course)
	ret0, _ := ret[0].(id.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertCourse indicates an expected call of UpsertCourse.
func (mr *MockUseCaseMockRecorder) UpsertCourse(course interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCourse", reflect.TypeOf((*MockUseCase)(nil).UpsertCourse), course)
}
